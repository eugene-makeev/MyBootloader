
MyBootloader.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  0000756e  00000602  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000056e  00007000  00007000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008f  00800124  00800124  00000626  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000626  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000658  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000698  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ee3  00000000  00000000  00000760  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d5  00000000  00000000  00001643  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000071b  00000000  00000000  00001f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000234  00000000  00000000  00002634  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b1  00000000  00000000  00002868  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007d6  00000000  00000000  00002e19  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  000035ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007000 <__vectors>:
    7000:	0c 94 34 38 	jmp	0x7068	; 0x7068 <__ctors_end>
    7004:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7008:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    700c:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7010:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7014:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7018:	0c 94 ef 39 	jmp	0x73de	; 0x73de <__vector_6>
    701c:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7020:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7024:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7028:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    702c:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7030:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7034:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7038:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    703c:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7040:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7044:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7048:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    704c:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7050:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7054:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7058:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    705c:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7060:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7064:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>

00007068 <__ctors_end>:
    7068:	11 24       	eor	r1, r1
    706a:	1f be       	out	0x3f, r1	; 63
    706c:	cf ef       	ldi	r28, 0xFF	; 255
    706e:	d8 e0       	ldi	r29, 0x08	; 8
    7070:	de bf       	out	0x3e, r29	; 62
    7072:	cd bf       	out	0x3d, r28	; 61

00007074 <__do_copy_data>:
    7074:	11 e0       	ldi	r17, 0x01	; 1
    7076:	a0 e0       	ldi	r26, 0x00	; 0
    7078:	b1 e0       	ldi	r27, 0x01	; 1
    707a:	ee e6       	ldi	r30, 0x6E	; 110
    707c:	f5 e7       	ldi	r31, 0x75	; 117
    707e:	02 c0       	rjmp	.+4      	; 0x7084 <__do_copy_data+0x10>
    7080:	05 90       	lpm	r0, Z+
    7082:	0d 92       	st	X+, r0
    7084:	a4 32       	cpi	r26, 0x24	; 36
    7086:	b1 07       	cpc	r27, r17
    7088:	d9 f7       	brne	.-10     	; 0x7080 <__do_copy_data+0xc>

0000708a <__do_clear_bss>:
    708a:	21 e0       	ldi	r18, 0x01	; 1
    708c:	a4 e2       	ldi	r26, 0x24	; 36
    708e:	b1 e0       	ldi	r27, 0x01	; 1
    7090:	01 c0       	rjmp	.+2      	; 0x7094 <.do_clear_bss_start>

00007092 <.do_clear_bss_loop>:
    7092:	1d 92       	st	X+, r1

00007094 <.do_clear_bss_start>:
    7094:	a3 3b       	cpi	r26, 0xB3	; 179
    7096:	b2 07       	cpc	r27, r18
    7098:	e1 f7       	brne	.-8      	; 0x7092 <.do_clear_bss_loop>
    709a:	0e 94 3d 3a 	call	0x747a	; 0x747a <main>
    709e:	0c 94 b5 3a 	jmp	0x756a	; 0x756a <_exit>

000070a2 <__bad_interrupt>:
    70a2:	0c 94 00 38 	jmp	0x7000	; 0x7000 <__vectors>

000070a6 <gp_timer_start>:
	data ^= crc & 0xFF;
	data ^= data << 4;
	tmp = (((uint16_t)data << 8) | ((crc >> 8) & 0xFF));
	tmp ^= (uint8_t)(data >> 4);
	return tmp ^= ((uint16_t)data << 3);
}
    70a6:	f8 94       	cli
    70a8:	90 e0       	ldi	r25, 0x00	; 0
    70aa:	fc 01       	movw	r30, r24
    70ac:	ee 0f       	add	r30, r30
    70ae:	ff 1f       	adc	r31, r31
    70b0:	8e 0f       	add	r24, r30
    70b2:	9f 1f       	adc	r25, r31
    70b4:	fc 01       	movw	r30, r24
    70b6:	e6 55       	subi	r30, 0x56	; 86
    70b8:	fe 4f       	sbci	r31, 0xFE	; 254
    70ba:	10 82       	st	Z, r1
    70bc:	61 83       	std	Z+1, r22	; 0x01
    70be:	12 82       	std	Z+2, r1	; 0x02
    70c0:	78 94       	sei
    70c2:	08 95       	ret

000070c4 <gp_timer_restart>:
    70c4:	f8 94       	cli
    70c6:	90 e0       	ldi	r25, 0x00	; 0
    70c8:	fc 01       	movw	r30, r24
    70ca:	ee 0f       	add	r30, r30
    70cc:	ff 1f       	adc	r31, r31
    70ce:	8e 0f       	add	r24, r30
    70d0:	9f 1f       	adc	r25, r31
    70d2:	fc 01       	movw	r30, r24
    70d4:	e6 55       	subi	r30, 0x56	; 86
    70d6:	fe 4f       	sbci	r31, 0xFE	; 254
    70d8:	10 82       	st	Z, r1
    70da:	12 82       	std	Z+2, r1	; 0x02
    70dc:	78 94       	sei
    70de:	08 95       	ret

000070e0 <gp_timer_get_clr_rdy>:
    70e0:	cf 93       	push	r28
    70e2:	28 2f       	mov	r18, r24
    70e4:	30 e0       	ldi	r19, 0x00	; 0
    70e6:	f9 01       	movw	r30, r18
    70e8:	ee 0f       	add	r30, r30
    70ea:	ff 1f       	adc	r31, r31
    70ec:	2e 0f       	add	r18, r30
    70ee:	3f 1f       	adc	r19, r31
    70f0:	f9 01       	movw	r30, r18
    70f2:	e6 55       	subi	r30, 0x56	; 86
    70f4:	fe 4f       	sbci	r31, 0xFE	; 254
    70f6:	c2 81       	ldd	r28, Z+2	; 0x02
    70f8:	c1 11       	cpse	r28, r1
    70fa:	0e 94 62 38 	call	0x70c4	; 0x70c4 <gp_timer_restart>
    70fe:	8c 2f       	mov	r24, r28
    7100:	cf 91       	pop	r28
    7102:	08 95       	ret

00007104 <wdt_init>:
    7104:	90 e4       	ldi	r25, 0x40	; 64
    7106:	69 9f       	mul	r22, r25
    7108:	b0 01       	movw	r22, r0
    710a:	11 24       	eor	r1, r1
    710c:	50 e0       	ldi	r21, 0x00	; 0
    710e:	44 0f       	add	r20, r20
    7110:	55 1f       	adc	r21, r21
    7112:	44 0f       	add	r20, r20
    7114:	55 1f       	adc	r21, r21
    7116:	44 0f       	add	r20, r20
    7118:	55 1f       	adc	r21, r21
    711a:	88 30       	cpi	r24, 0x08	; 8
    711c:	10 f4       	brcc	.+4      	; 0x7122 <wdt_init+0x1e>
    711e:	90 e0       	ldi	r25, 0x00	; 0
    7120:	01 c0       	rjmp	.+2      	; 0x7124 <wdt_init+0x20>
    7122:	90 e2       	ldi	r25, 0x20	; 32
    7124:	87 70       	andi	r24, 0x07	; 7
    7126:	48 2b       	or	r20, r24
    7128:	46 2b       	or	r20, r22
    712a:	49 2b       	or	r20, r25
    712c:	a8 95       	wdr
    712e:	84 b7       	in	r24, 0x34	; 52
    7130:	87 7f       	andi	r24, 0xF7	; 247
    7132:	84 bf       	out	0x34, r24	; 52
    7134:	e0 e6       	ldi	r30, 0x60	; 96
    7136:	f0 e0       	ldi	r31, 0x00	; 0
    7138:	80 81       	ld	r24, Z
    713a:	88 61       	ori	r24, 0x18	; 24
    713c:	80 83       	st	Z, r24
    713e:	40 83       	st	Z, r20
    7140:	08 95       	ret

00007142 <isr_init>:
    7142:	81 e0       	ldi	r24, 0x01	; 1
    7144:	85 bf       	out	0x35, r24	; 53
    7146:	82 e0       	ldi	r24, 0x02	; 2
    7148:	85 bf       	out	0x35, r24	; 53
    714a:	08 95       	ret

0000714c <gpio_init>:
    714c:	81 e0       	ldi	r24, 0x01	; 1
    714e:	88 b9       	out	0x08, r24	; 8
    7150:	38 98       	cbi	0x07, 0	; 7
    7152:	80 e2       	ldi	r24, 0x20	; 32
    7154:	84 b9       	out	0x04, r24	; 4
    7156:	85 b9       	out	0x05, r24	; 5
    7158:	08 95       	ret

0000715a <uart_init>:
    715a:	61 15       	cp	r22, r1
    715c:	21 ee       	ldi	r18, 0xE1	; 225
    715e:	72 07       	cpc	r23, r18
    7160:	81 05       	cpc	r24, r1
    7162:	91 05       	cpc	r25, r1
    7164:	48 f5       	brcc	.+82     	; 0x71b8 <uart_init+0x5e>
    7166:	dc 01       	movw	r26, r24
    7168:	cb 01       	movw	r24, r22
    716a:	88 0f       	add	r24, r24
    716c:	99 1f       	adc	r25, r25
    716e:	aa 1f       	adc	r26, r26
    7170:	bb 1f       	adc	r27, r27
    7172:	88 0f       	add	r24, r24
    7174:	99 1f       	adc	r25, r25
    7176:	aa 1f       	adc	r26, r26
    7178:	bb 1f       	adc	r27, r27
    717a:	9c 01       	movw	r18, r24
    717c:	ad 01       	movw	r20, r26
    717e:	22 0f       	add	r18, r18
    7180:	33 1f       	adc	r19, r19
    7182:	44 1f       	adc	r20, r20
    7184:	55 1f       	adc	r21, r21
    7186:	60 e0       	ldi	r22, 0x00	; 0
    7188:	74 e2       	ldi	r23, 0x24	; 36
    718a:	84 ef       	ldi	r24, 0xF4	; 244
    718c:	90 e0       	ldi	r25, 0x00	; 0
    718e:	0e 94 93 3a 	call	0x7526	; 0x7526 <__udivmodsi4>
    7192:	da 01       	movw	r26, r20
    7194:	c9 01       	movw	r24, r18
    7196:	01 97       	sbiw	r24, 0x01	; 1
    7198:	a1 09       	sbc	r26, r1
    719a:	b1 09       	sbc	r27, r1
    719c:	ac 01       	movw	r20, r24
    719e:	bd 01       	movw	r22, r26
    71a0:	76 95       	lsr	r23
    71a2:	67 95       	ror	r22
    71a4:	57 95       	ror	r21
    71a6:	47 95       	ror	r20
    71a8:	94 2f       	mov	r25, r20
    71aa:	25 2f       	mov	r18, r21
    71ac:	e0 ec       	ldi	r30, 0xC0	; 192
    71ae:	f0 e0       	ldi	r31, 0x00	; 0
    71b0:	80 81       	ld	r24, Z
    71b2:	8d 7f       	andi	r24, 0xFD	; 253
    71b4:	80 83       	st	Z, r24
    71b6:	22 c0       	rjmp	.+68     	; 0x71fc <uart_init+0xa2>
    71b8:	9b 01       	movw	r18, r22
    71ba:	ac 01       	movw	r20, r24
    71bc:	22 0f       	add	r18, r18
    71be:	33 1f       	adc	r19, r19
    71c0:	44 1f       	adc	r20, r20
    71c2:	55 1f       	adc	r21, r21
    71c4:	22 0f       	add	r18, r18
    71c6:	33 1f       	adc	r19, r19
    71c8:	44 1f       	adc	r20, r20
    71ca:	55 1f       	adc	r21, r21
    71cc:	60 e0       	ldi	r22, 0x00	; 0
    71ce:	74 e2       	ldi	r23, 0x24	; 36
    71d0:	84 ef       	ldi	r24, 0xF4	; 244
    71d2:	90 e0       	ldi	r25, 0x00	; 0
    71d4:	0e 94 93 3a 	call	0x7526	; 0x7526 <__udivmodsi4>
    71d8:	da 01       	movw	r26, r20
    71da:	c9 01       	movw	r24, r18
    71dc:	01 97       	sbiw	r24, 0x01	; 1
    71de:	a1 09       	sbc	r26, r1
    71e0:	b1 09       	sbc	r27, r1
    71e2:	ac 01       	movw	r20, r24
    71e4:	bd 01       	movw	r22, r26
    71e6:	76 95       	lsr	r23
    71e8:	67 95       	ror	r22
    71ea:	57 95       	ror	r21
    71ec:	47 95       	ror	r20
    71ee:	94 2f       	mov	r25, r20
    71f0:	25 2f       	mov	r18, r21
    71f2:	e0 ec       	ldi	r30, 0xC0	; 192
    71f4:	f0 e0       	ldi	r31, 0x00	; 0
    71f6:	80 81       	ld	r24, Z
    71f8:	82 60       	ori	r24, 0x02	; 2
    71fa:	80 83       	st	Z, r24
    71fc:	20 93 c5 00 	sts	0x00C5, r18	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    7200:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
    7204:	86 e0       	ldi	r24, 0x06	; 6
    7206:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
    720a:	88 e1       	ldi	r24, 0x18	; 24
    720c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    7210:	08 95       	ret

00007212 <uart_putch>:
    7212:	e0 ec       	ldi	r30, 0xC0	; 192
    7214:	f0 e0       	ldi	r31, 0x00	; 0
    7216:	90 81       	ld	r25, Z
    7218:	95 ff       	sbrs	r25, 5
    721a:	fd cf       	rjmp	.-6      	; 0x7216 <uart_putch+0x4>
    721c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    7220:	08 95       	ret

00007222 <uart_getch>:
    7222:	e0 ec       	ldi	r30, 0xC0	; 192
    7224:	f0 e0       	ldi	r31, 0x00	; 0
    7226:	80 81       	ld	r24, Z
    7228:	88 23       	and	r24, r24
    722a:	ec f7       	brge	.-6      	; 0x7226 <uart_getch+0x4>
    722c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    7230:	08 95       	ret

00007232 <uart_print>:
    7232:	cf 93       	push	r28
    7234:	df 93       	push	r29
    7236:	ec 01       	movw	r28, r24
    7238:	88 81       	ld	r24, Y
    723a:	88 23       	and	r24, r24
    723c:	59 f0       	breq	.+22     	; 0x7254 <uart_print+0x22>
    723e:	8a 30       	cpi	r24, 0x0A	; 10
    7240:	19 f4       	brne	.+6      	; 0x7248 <uart_print+0x16>
    7242:	8d e0       	ldi	r24, 0x0D	; 13
    7244:	0e 94 09 39 	call	0x7212	; 0x7212 <uart_putch>
    7248:	89 91       	ld	r24, Y+
    724a:	0e 94 09 39 	call	0x7212	; 0x7212 <uart_putch>
    724e:	88 81       	ld	r24, Y
    7250:	81 11       	cpse	r24, r1
    7252:	f5 cf       	rjmp	.-22     	; 0x723e <uart_print+0xc>
    7254:	df 91       	pop	r29
    7256:	cf 91       	pop	r28
    7258:	08 95       	ret

0000725a <get_cmd_code>:
    725a:	fc 01       	movw	r30, r24
    725c:	80 81       	ld	r24, Z
    725e:	80 35       	cpi	r24, 0x50	; 80
    7260:	49 f0       	breq	.+18     	; 0x7274 <get_cmd_code+0x1a>
    7262:	82 35       	cpi	r24, 0x52	; 82
    7264:	39 f0       	breq	.+14     	; 0x7274 <get_cmd_code+0x1a>
    7266:	89 34       	cpi	r24, 0x49	; 73
    7268:	29 f0       	breq	.+10     	; 0x7274 <get_cmd_code+0x1a>
    726a:	80 e0       	ldi	r24, 0x00	; 0
    726c:	91 e0       	ldi	r25, 0x01	; 1
    726e:	0e 94 19 39 	call	0x7232	; 0x7232 <uart_print>
    7272:	80 e0       	ldi	r24, 0x00	; 0
    7274:	08 95       	ret

00007276 <uart_get_cmd>:
    7276:	0f 93       	push	r16
    7278:	1f 93       	push	r17
    727a:	cf 93       	push	r28
    727c:	df 93       	push	r29
    727e:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <uart_buffer>
    7282:	10 e0       	ldi	r17, 0x00	; 0
    7284:	c6 e2       	ldi	r28, 0x26	; 38
    7286:	d1 e0       	ldi	r29, 0x01	; 1
    7288:	01 e0       	ldi	r16, 0x01	; 1
    728a:	01 c0       	rjmp	.+2      	; 0x728e <uart_get_cmd+0x18>
    728c:	10 2f       	mov	r17, r16
    728e:	0e 94 11 39 	call	0x7222	; 0x7222 <uart_getch>
    7292:	88 83       	st	Y, r24
    7294:	8b 35       	cpi	r24, 0x5B	; 91
    7296:	d1 f3       	breq	.-12     	; 0x728c <uart_get_cmd+0x16>
    7298:	8d 35       	cpi	r24, 0x5D	; 93
    729a:	19 f4       	brne	.+6      	; 0x72a2 <uart_get_cmd+0x2c>
    729c:	11 23       	and	r17, r17
    729e:	b9 f3       	breq	.-18     	; 0x728e <uart_get_cmd+0x18>
    72a0:	04 c0       	rjmp	.+8      	; 0x72aa <uart_get_cmd+0x34>
    72a2:	11 23       	and	r17, r17
    72a4:	a1 f3       	breq	.-24     	; 0x728e <uart_get_cmd+0x18>
    72a6:	21 96       	adiw	r28, 0x01	; 1
    72a8:	f2 cf       	rjmp	.-28     	; 0x728e <uart_get_cmd+0x18>
    72aa:	86 e2       	ldi	r24, 0x26	; 38
    72ac:	91 e0       	ldi	r25, 0x01	; 1
    72ae:	0e 94 2d 39 	call	0x725a	; 0x725a <get_cmd_code>
    72b2:	df 91       	pop	r29
    72b4:	cf 91       	pop	r28
    72b6:	1f 91       	pop	r17
    72b8:	0f 91       	pop	r16
    72ba:	08 95       	ret

000072bc <fill_page_buffer>:
    72bc:	cf 93       	push	r28
    72be:	df 93       	push	r29
    72c0:	9b 01       	movw	r18, r22
    72c2:	eb 01       	movw	r28, r22
    72c4:	c0 58       	subi	r28, 0x80	; 128
    72c6:	df 4f       	sbci	r29, 0xFF	; 255
    72c8:	db 01       	movw	r26, r22
    72ca:	71 e0       	ldi	r23, 0x01	; 1
    72cc:	ac 01       	movw	r20, r24
    72ce:	42 1b       	sub	r20, r18
    72d0:	53 0b       	sbc	r21, r19
    72d2:	2c 91       	ld	r18, X
    72d4:	fa 01       	movw	r30, r20
    72d6:	ea 0f       	add	r30, r26
    72d8:	fb 1f       	adc	r31, r27
    72da:	11 96       	adiw	r26, 0x01	; 1
    72dc:	9c 91       	ld	r25, X
    72de:	11 97       	sbiw	r26, 0x01	; 1
    72e0:	30 e0       	ldi	r19, 0x00	; 0
    72e2:	39 2b       	or	r19, r25
    72e4:	09 01       	movw	r0, r18
    72e6:	70 93 57 00 	sts	0x0057, r23	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    72ea:	e8 95       	spm
    72ec:	11 24       	eor	r1, r1
    72ee:	12 96       	adiw	r26, 0x02	; 2
    72f0:	ac 17       	cp	r26, r28
    72f2:	bd 07       	cpc	r27, r29
    72f4:	71 f7       	brne	.-36     	; 0x72d2 <fill_page_buffer+0x16>
    72f6:	df 91       	pop	r29
    72f8:	cf 91       	pop	r28
    72fa:	08 95       	ret

000072fc <program_page>:
    72fc:	1f 93       	push	r17
    72fe:	cf 93       	push	r28
    7300:	df 93       	push	r29
    7302:	ec 01       	movw	r28, r24
    7304:	1f b7       	in	r17, 0x3f	; 63
    7306:	f8 94       	cli
    7308:	f9 99       	sbic	0x1f, 1	; 31
    730a:	fe cf       	rjmp	.-4      	; 0x7308 <program_page+0xc>
    730c:	83 e0       	ldi	r24, 0x03	; 3
    730e:	fe 01       	movw	r30, r28
    7310:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    7314:	e8 95       	spm
    7316:	07 b6       	in	r0, 0x37	; 55
    7318:	00 fc       	sbrc	r0, 0
    731a:	fd cf       	rjmp	.-6      	; 0x7316 <program_page+0x1a>
    731c:	ce 01       	movw	r24, r28
    731e:	0e 94 5e 39 	call	0x72bc	; 0x72bc <fill_page_buffer>
    7322:	85 e0       	ldi	r24, 0x05	; 5
    7324:	fe 01       	movw	r30, r28
    7326:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    732a:	e8 95       	spm
    732c:	07 b6       	in	r0, 0x37	; 55
    732e:	00 fc       	sbrc	r0, 0
    7330:	fd cf       	rjmp	.-6      	; 0x732c <program_page+0x30>
    7332:	81 e1       	ldi	r24, 0x11	; 17
    7334:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    7338:	e8 95       	spm
    733a:	1f bf       	out	0x3f, r17	; 63
    733c:	df 91       	pop	r29
    733e:	cf 91       	pop	r28
    7340:	1f 91       	pop	r17
    7342:	08 95       	ret

00007344 <page_program_receive>:

bool page_program_receive(page_program_cmd_packet_t * cmd)
{
    7344:	ef 92       	push	r14
    7346:	ff 92       	push	r15
    7348:	0f 93       	push	r16
    734a:	1f 93       	push	r17
    734c:	cf 93       	push	r28
    734e:	df 93       	push	r29
    7350:	7c 01       	movw	r14, r24
    7352:	8c 01       	movw	r16, r24
    7354:	0c 57       	subi	r16, 0x7C	; 124
    7356:	1f 4f       	sbci	r17, 0xFF	; 255
	uint8_t * buffer = (uint8_t *) cmd;
    7358:	ec 01       	movw	r28, r24
	uint16_t crc16 = 0xFFFF;
	
	for (uint8_t bytes = 0; bytes < sizeof(page_program_cmd_packet_t); bytes++)
	{
		*buffer = uart_getch();
    735a:	0e 94 11 39 	call	0x7222	; 0x7222 <uart_getch>
    735e:	89 93       	st	Y+, r24
bool page_program_receive(page_program_cmd_packet_t * cmd)
{
	uint8_t * buffer = (uint8_t *) cmd;
	uint16_t crc16 = 0xFFFF;
	
	for (uint8_t bytes = 0; bytes < sizeof(page_program_cmd_packet_t); bytes++)
    7360:	0c 17       	cp	r16, r28
    7362:	1d 07       	cpc	r17, r29
    7364:	d1 f7       	brne	.-12     	; 0x735a <page_program_receive+0x16>
		}
		
		buffer++;
	}
	
	return (crc16 == cmd->crc16);
    7366:	f7 01       	movw	r30, r14
    7368:	ee 57       	subi	r30, 0x7E	; 126
    736a:	ff 4f       	sbci	r31, 0xFF	; 255
    736c:	81 e0       	ldi	r24, 0x01	; 1
    736e:	20 81       	ld	r18, Z
    7370:	31 81       	ldd	r19, Z+1	; 0x01
    7372:	2f 3f       	cpi	r18, 0xFF	; 255
    7374:	3f 4f       	sbci	r19, 0xFF	; 255
    7376:	09 f0       	breq	.+2      	; 0x737a <page_program_receive+0x36>
    7378:	80 e0       	ldi	r24, 0x00	; 0
}
    737a:	df 91       	pop	r29
    737c:	cf 91       	pop	r28
    737e:	1f 91       	pop	r17
    7380:	0f 91       	pop	r16
    7382:	ff 90       	pop	r15
    7384:	ef 90       	pop	r14
    7386:	08 95       	ret

00007388 <page_program_handle>:

bool page_program_handle(void)
{
    7388:	cf 93       	push	r28
	page_program_cmd_packet_t * pp_cmd_ptr = (page_program_cmd_packet_t *) uart_buffer;
	
	bool status = page_program_receive(pp_cmd_ptr);
    738a:	86 e2       	ldi	r24, 0x26	; 38
    738c:	91 e0       	ldi	r25, 0x01	; 1
    738e:	0e 94 a2 39 	call	0x7344	; 0x7344 <page_program_receive>
    7392:	c8 2f       	mov	r28, r24
	
	if (status)
    7394:	88 23       	and	r24, r24
    7396:	59 f0       	breq	.+22     	; 0x73ae <page_program_handle+0x26>
	{
		program_page(pp_cmd_ptr->address, pp_cmd_ptr->buffer);
    7398:	68 e2       	ldi	r22, 0x28	; 40
    739a:	71 e0       	ldi	r23, 0x01	; 1
    739c:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <uart_buffer>
    73a0:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <uart_buffer+0x1>
    73a4:	0e 94 7e 39 	call	0x72fc	; 0x72fc <program_page>
	}
	
	uart_print(status ? ACK_CMD : NACK_CMD);
    73a8:	86 e0       	ldi	r24, 0x06	; 6
    73aa:	91 e0       	ldi	r25, 0x01	; 1
    73ac:	02 c0       	rjmp	.+4      	; 0x73b2 <page_program_handle+0x2a>
    73ae:	80 e0       	ldi	r24, 0x00	; 0
    73b0:	91 e0       	ldi	r25, 0x01	; 1
    73b2:	0e 94 19 39 	call	0x7232	; 0x7232 <uart_print>
	return status;
}
    73b6:	8c 2f       	mov	r24, r28
    73b8:	cf 91       	pop	r28
    73ba:	08 95       	ret

000073bc <restart>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    73bc:	0f b6       	in	r0, 0x3f	; 63
    73be:	f8 94       	cli
    73c0:	a8 95       	wdr
    73c2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    73c6:	88 61       	ori	r24, 0x18	; 24
    73c8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    73cc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
    73d0:	0f be       	out	0x3f, r0	; 63

void restart(void)
{
	wdt_disable();
	reset();
    73d2:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <__data_end>
    73d6:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <__data_end+0x1>
    73da:	09 95       	icall
    73dc:	08 95       	ret

000073de <__vector_6>:
}

ISR(WDT_vect)
{
    73de:	1f 92       	push	r1
    73e0:	0f 92       	push	r0
    73e2:	0f b6       	in	r0, 0x3f	; 63
    73e4:	0f 92       	push	r0
    73e6:	11 24       	eor	r1, r1
    73e8:	2f 93       	push	r18
    73ea:	3f 93       	push	r19
    73ec:	4f 93       	push	r20
    73ee:	5f 93       	push	r21
    73f0:	6f 93       	push	r22
    73f2:	7f 93       	push	r23
    73f4:	8f 93       	push	r24
    73f6:	9f 93       	push	r25
    73f8:	af 93       	push	r26
    73fa:	bf 93       	push	r27
    73fc:	ef 93       	push	r30
    73fe:	ff 93       	push	r31
	wdt_reset();
    7400:	a8 95       	wdr
	WDTCSR |= (1 << WDIE);
    7402:	e0 e6       	ldi	r30, 0x60	; 96
    7404:	f0 e0       	ldi	r31, 0x00	; 0
    7406:	80 81       	ld	r24, Z
    7408:	80 64       	ori	r24, 0x40	; 64
    740a:	80 83       	st	Z, r24
    740c:	80 e0       	ldi	r24, 0x00	; 0
    740e:	90 e0       	ldi	r25, 0x00	; 0
{
	for (uint8_t timer = LED_TIMER; timer < MAX_TIMER; timer++)
	{
		if (++gp_timer[timer].ticks_15ms == gp_timer[timer].compare)
		{
			gp_timer[timer].done = true;
    7410:	41 e0       	ldi	r20, 0x01	; 1

inline void gp_timer_count(void)
{
	for (uint8_t timer = LED_TIMER; timer < MAX_TIMER; timer++)
	{
		if (++gp_timer[timer].ticks_15ms == gp_timer[timer].compare)
    7412:	fc 01       	movw	r30, r24
    7414:	ee 0f       	add	r30, r30
    7416:	ff 1f       	adc	r31, r31
    7418:	e8 0f       	add	r30, r24
    741a:	f9 1f       	adc	r31, r25
    741c:	e6 55       	subi	r30, 0x56	; 86
    741e:	fe 4f       	sbci	r31, 0xFE	; 254
    7420:	20 81       	ld	r18, Z
    7422:	2f 5f       	subi	r18, 0xFF	; 255
    7424:	20 83       	st	Z, r18
    7426:	31 81       	ldd	r19, Z+1	; 0x01
    7428:	23 13       	cpse	r18, r19
    742a:	09 c0       	rjmp	.+18     	; 0x743e <__vector_6+0x60>
		{
			gp_timer[timer].done = true;
    742c:	fc 01       	movw	r30, r24
    742e:	ee 0f       	add	r30, r30
    7430:	ff 1f       	adc	r31, r31
    7432:	e8 0f       	add	r30, r24
    7434:	f9 1f       	adc	r31, r25
    7436:	e6 55       	subi	r30, 0x56	; 86
    7438:	fe 4f       	sbci	r31, 0xFE	; 254
    743a:	42 83       	std	Z+2, r20	; 0x02
			gp_timer[timer].ticks_15ms = 0;
    743c:	10 82       	st	Z, r1
    743e:	01 96       	adiw	r24, 0x01	; 1
	sei();
}

inline void gp_timer_count(void)
{
	for (uint8_t timer = LED_TIMER; timer < MAX_TIMER; timer++)
    7440:	83 30       	cpi	r24, 0x03	; 3
    7442:	91 05       	cpc	r25, r1
    7444:	31 f7       	brne	.-52     	; 0x7412 <__vector_6+0x34>
{
	wdt_reset();
	WDTCSR |= (1 << WDIE);
	gp_timer_count();
	
	if (gp_timer_get_clr_rdy(LED_TIMER))
    7446:	80 e0       	ldi	r24, 0x00	; 0
    7448:	0e 94 70 38 	call	0x70e0	; 0x70e0 <gp_timer_get_clr_rdy>
    744c:	88 23       	and	r24, r24
    744e:	21 f0       	breq	.+8      	; 0x7458 <__vector_6+0x7a>
	{
		LED_TOGGLE;
    7450:	95 b1       	in	r25, 0x05	; 5
    7452:	80 e2       	ldi	r24, 0x20	; 32
    7454:	89 27       	eor	r24, r25
    7456:	85 b9       	out	0x05, r24	; 5
	}
}
    7458:	ff 91       	pop	r31
    745a:	ef 91       	pop	r30
    745c:	bf 91       	pop	r27
    745e:	af 91       	pop	r26
    7460:	9f 91       	pop	r25
    7462:	8f 91       	pop	r24
    7464:	7f 91       	pop	r23
    7466:	6f 91       	pop	r22
    7468:	5f 91       	pop	r21
    746a:	4f 91       	pop	r20
    746c:	3f 91       	pop	r19
    746e:	2f 91       	pop	r18
    7470:	0f 90       	pop	r0
    7472:	0f be       	out	0x3f, r0	; 63
    7474:	0f 90       	pop	r0
    7476:	1f 90       	pop	r1
    7478:	18 95       	reti

0000747a <main>:

int main(void)
{
    747a:	cf 93       	push	r28
    747c:	df 93       	push	r29
    747e:	0f b6       	in	r0, 0x3f	; 63
    7480:	f8 94       	cli
    7482:	a8 95       	wdr
    7484:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    7488:	88 61       	ori	r24, 0x18	; 24
    748a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    748e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
    7492:	0f be       	out	0x3f, r0	; 63
	wdt_disable();
	isr_init();
    7494:	0e 94 a1 38 	call	0x7142	; 0x7142 <isr_init>
	gpio_init();
    7498:	0e 94 a6 38 	call	0x714c	; 0x714c <gpio_init>
	sei();
    749c:	78 94       	sei
	
	bool connected = false;
	
	if (BUTTON == DOWN)
    749e:	30 99       	sbic	0x06, 0	; 6
    74a0:	38 c0       	rjmp	.+112    	; 0x7512 <main+0x98>
	{
		uart_init(BAUD_RATE_115200);
    74a2:	60 e0       	ldi	r22, 0x00	; 0
    74a4:	72 ec       	ldi	r23, 0xC2	; 194
    74a6:	81 e0       	ldi	r24, 0x01	; 1
    74a8:	90 e0       	ldi	r25, 0x00	; 0
    74aa:	0e 94 ad 38 	call	0x715a	; 0x715a <uart_init>
		wdt_init(WDTO_15MS, true, false);
    74ae:	40 e0       	ldi	r20, 0x00	; 0
    74b0:	61 e0       	ldi	r22, 0x01	; 1
    74b2:	80 e0       	ldi	r24, 0x00	; 0
    74b4:	0e 94 82 38 	call	0x7104	; 0x7104 <wdt_init>

#if (AUTO_DETECT_FEATURE == 1)		
		gp_timer_start(SYNC_TIMER, AUTO_DETECT_TIME);
    74b8:	66 e0       	ldi	r22, 0x06	; 6
    74ba:	82 e0       	ldi	r24, 0x02	; 2
    74bc:	0e 94 53 38 	call	0x70a6	; 0x70a6 <gp_timer_start>
#endif

		gp_timer_start(LED_TIMER, LED_TIME_DEFAULT);
    74c0:	61 e2       	ldi	r22, 0x21	; 33
    74c2:	80 e0       	ldi	r24, 0x00	; 0
    74c4:	0e 94 53 38 	call	0x70a6	; 0x70a6 <gp_timer_start>
	wdt_disable();
	isr_init();
	gpio_init();
	sei();
	
	bool connected = false;
    74c8:	c0 e0       	ldi	r28, 0x00	; 0
		{
			switch (uart_get_cmd())
			{		
			case IDENTIFY_CMD:
				uart_print("[MyGrbl v1.0]");
				gp_timer_start(LED_TIMER, LED_TIME_CONNECTED);
    74ca:	d1 e0       	ldi	r29, 0x01	; 1

		gp_timer_start(LED_TIMER, LED_TIME_DEFAULT);
		
		while (1)
		{
			switch (uart_get_cmd())
    74cc:	0e 94 3b 39 	call	0x7276	; 0x7276 <uart_get_cmd>
    74d0:	80 35       	cpi	r24, 0x50	; 80
    74d2:	71 f0       	breq	.+28     	; 0x74f0 <main+0x76>
    74d4:	82 35       	cpi	r24, 0x52	; 82
    74d6:	79 f0       	breq	.+30     	; 0x74f6 <main+0x7c>
    74d8:	89 34       	cpi	r24, 0x49	; 73
    74da:	79 f4       	brne	.+30     	; 0x74fa <main+0x80>
			{		
			case IDENTIFY_CMD:
				uart_print("[MyGrbl v1.0]");
    74dc:	8c e0       	ldi	r24, 0x0C	; 12
    74de:	91 e0       	ldi	r25, 0x01	; 1
    74e0:	0e 94 19 39 	call	0x7232	; 0x7232 <uart_print>
				gp_timer_start(LED_TIMER, LED_TIME_CONNECTED);
    74e4:	66 e0       	ldi	r22, 0x06	; 6
    74e6:	80 e0       	ldi	r24, 0x00	; 0
    74e8:	0e 94 53 38 	call	0x70a6	; 0x70a6 <gp_timer_start>
    74ec:	cd 2f       	mov	r28, r29
    74ee:	ee cf       	rjmp	.-36     	; 0x74cc <main+0x52>
				connected = true;
				break;
			case PAGE_PROGRAM_CMD:
				page_program_handle();
    74f0:	0e 94 c4 39 	call	0x7388	; 0x7388 <page_program_handle>
				break;
    74f4:	02 c0       	rjmp	.+4      	; 0x74fa <main+0x80>
			case RESET_CMD:
				restart();
    74f6:	0e 94 de 39 	call	0x73bc	; 0x73bc <restart>
			default:
				break;
			}

#if (AUTO_DETECT_FEATURE == 1)
 			if (!connected && gp_timer_get_clr_rdy(SYNC_TIMER))
    74fa:	c1 11       	cpse	r28, r1
    74fc:	e7 cf       	rjmp	.-50     	; 0x74cc <main+0x52>
    74fe:	82 e0       	ldi	r24, 0x02	; 2
    7500:	0e 94 70 38 	call	0x70e0	; 0x70e0 <gp_timer_get_clr_rdy>
    7504:	88 23       	and	r24, r24
    7506:	11 f3       	breq	.-60     	; 0x74cc <main+0x52>
 			{
 				uart_print(SYNC);
    7508:	8a e1       	ldi	r24, 0x1A	; 26
    750a:	91 e0       	ldi	r25, 0x01	; 1
    750c:	0e 94 19 39 	call	0x7232	; 0x7232 <uart_print>
    7510:	dd cf       	rjmp	.-70     	; 0x74cc <main+0x52>
 			}
#endif
		}
	}

	reset();	
    7512:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <__data_end>
    7516:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <__data_end+0x1>
    751a:	09 95       	icall
}
    751c:	80 e0       	ldi	r24, 0x00	; 0
    751e:	90 e0       	ldi	r25, 0x00	; 0
    7520:	df 91       	pop	r29
    7522:	cf 91       	pop	r28
    7524:	08 95       	ret

00007526 <__udivmodsi4>:
    7526:	a1 e2       	ldi	r26, 0x21	; 33
    7528:	1a 2e       	mov	r1, r26
    752a:	aa 1b       	sub	r26, r26
    752c:	bb 1b       	sub	r27, r27
    752e:	fd 01       	movw	r30, r26
    7530:	0d c0       	rjmp	.+26     	; 0x754c <__udivmodsi4_ep>

00007532 <__udivmodsi4_loop>:
    7532:	aa 1f       	adc	r26, r26
    7534:	bb 1f       	adc	r27, r27
    7536:	ee 1f       	adc	r30, r30
    7538:	ff 1f       	adc	r31, r31
    753a:	a2 17       	cp	r26, r18
    753c:	b3 07       	cpc	r27, r19
    753e:	e4 07       	cpc	r30, r20
    7540:	f5 07       	cpc	r31, r21
    7542:	20 f0       	brcs	.+8      	; 0x754c <__udivmodsi4_ep>
    7544:	a2 1b       	sub	r26, r18
    7546:	b3 0b       	sbc	r27, r19
    7548:	e4 0b       	sbc	r30, r20
    754a:	f5 0b       	sbc	r31, r21

0000754c <__udivmodsi4_ep>:
    754c:	66 1f       	adc	r22, r22
    754e:	77 1f       	adc	r23, r23
    7550:	88 1f       	adc	r24, r24
    7552:	99 1f       	adc	r25, r25
    7554:	1a 94       	dec	r1
    7556:	69 f7       	brne	.-38     	; 0x7532 <__udivmodsi4_loop>
    7558:	60 95       	com	r22
    755a:	70 95       	com	r23
    755c:	80 95       	com	r24
    755e:	90 95       	com	r25
    7560:	9b 01       	movw	r18, r22
    7562:	ac 01       	movw	r20, r24
    7564:	bd 01       	movw	r22, r26
    7566:	cf 01       	movw	r24, r30
    7568:	08 95       	ret

0000756a <_exit>:
    756a:	f8 94       	cli

0000756c <__stop_program>:
    756c:	ff cf       	rjmp	.-2      	; 0x756c <__stop_program>
