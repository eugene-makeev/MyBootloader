
MyBootloader.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000080  00800100  000074c4  00000558  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004c4  00007000  00007000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008b  00800180  00800180  000005d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000608  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f34  00000000  00000000  00000718  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d2  00000000  00000000  0000164c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000806  00000000  00000000  00001f1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000274  00000000  00000000  00002724  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000578  00000000  00000000  00002998  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008ad  00000000  00000000  00002f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  000037bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007000 <__vectors>:
    7000:	0c 94 34 38 	jmp	0x7068	; 0x7068 <__ctors_end>
    7004:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7008:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    700c:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7010:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7014:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7018:	0c 94 b3 39 	jmp	0x7366	; 0x7366 <__vector_6>
    701c:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7020:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7024:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7028:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    702c:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7030:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7034:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7038:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    703c:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7040:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7044:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7048:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    704c:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7050:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7054:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7058:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    705c:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7060:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7064:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>

00007068 <__ctors_end>:
    7068:	11 24       	eor	r1, r1
    706a:	1f be       	out	0x3f, r1	; 63
    706c:	cf ef       	ldi	r28, 0xFF	; 255
    706e:	d8 e0       	ldi	r29, 0x08	; 8
    7070:	de bf       	out	0x3e, r29	; 62
    7072:	cd bf       	out	0x3d, r28	; 61

00007074 <__do_copy_data>:
    7074:	11 e0       	ldi	r17, 0x01	; 1
    7076:	a0 e0       	ldi	r26, 0x00	; 0
    7078:	b1 e0       	ldi	r27, 0x01	; 1
    707a:	e4 ec       	ldi	r30, 0xC4	; 196
    707c:	f4 e7       	ldi	r31, 0x74	; 116
    707e:	02 c0       	rjmp	.+4      	; 0x7084 <__do_copy_data+0x10>
    7080:	05 90       	lpm	r0, Z+
    7082:	0d 92       	st	X+, r0
    7084:	a0 38       	cpi	r26, 0x80	; 128
    7086:	b1 07       	cpc	r27, r17
    7088:	d9 f7       	brne	.-10     	; 0x7080 <__do_copy_data+0xc>

0000708a <__do_clear_bss>:
    708a:	22 e0       	ldi	r18, 0x02	; 2
    708c:	a0 e8       	ldi	r26, 0x80	; 128
    708e:	b1 e0       	ldi	r27, 0x01	; 1
    7090:	01 c0       	rjmp	.+2      	; 0x7094 <.do_clear_bss_start>

00007092 <.do_clear_bss_loop>:
    7092:	1d 92       	st	X+, r1

00007094 <.do_clear_bss_start>:
    7094:	ab 30       	cpi	r26, 0x0B	; 11
    7096:	b2 07       	cpc	r27, r18
    7098:	e1 f7       	brne	.-8      	; 0x7092 <.do_clear_bss_loop>
    709a:	0e 94 01 3a 	call	0x7402	; 0x7402 <main>
    709e:	0c 94 60 3a 	jmp	0x74c0	; 0x74c0 <_exit>

000070a2 <__bad_interrupt>:
    70a2:	0c 94 00 38 	jmp	0x7000	; 0x7000 <__vectors>

000070a6 <gp_timer_start>:
	boot_rww_enable();
}

void update_fw(void)
{
	uart_print("Update FW:\n");
    70a6:	f8 94       	cli
    70a8:	90 e0       	ldi	r25, 0x00	; 0
    70aa:	fc 01       	movw	r30, r24
    70ac:	ee 0f       	add	r30, r30
    70ae:	ff 1f       	adc	r31, r31
    70b0:	8e 0f       	add	r24, r30
    70b2:	9f 1f       	adc	r25, r31
    70b4:	fc 01       	movw	r30, r24
    70b6:	ee 5f       	subi	r30, 0xFE	; 254
    70b8:	fd 4f       	sbci	r31, 0xFD	; 253
    70ba:	10 82       	st	Z, r1
    70bc:	61 83       	std	Z+1, r22	; 0x01
    70be:	12 82       	std	Z+2, r1	; 0x02
    70c0:	78 94       	sei
    70c2:	08 95       	ret

000070c4 <gp_timer_restart>:
    70c4:	f8 94       	cli
    70c6:	90 e0       	ldi	r25, 0x00	; 0
    70c8:	fc 01       	movw	r30, r24
    70ca:	ee 0f       	add	r30, r30
    70cc:	ff 1f       	adc	r31, r31
    70ce:	8e 0f       	add	r24, r30
    70d0:	9f 1f       	adc	r25, r31
    70d2:	fc 01       	movw	r30, r24
    70d4:	ee 5f       	subi	r30, 0xFE	; 254
    70d6:	fd 4f       	sbci	r31, 0xFD	; 253
    70d8:	10 82       	st	Z, r1
    70da:	12 82       	std	Z+2, r1	; 0x02
    70dc:	78 94       	sei
    70de:	08 95       	ret

000070e0 <gp_timer_get_clr_rdy>:
    70e0:	cf 93       	push	r28
    70e2:	28 2f       	mov	r18, r24
    70e4:	30 e0       	ldi	r19, 0x00	; 0
    70e6:	f9 01       	movw	r30, r18
    70e8:	ee 0f       	add	r30, r30
    70ea:	ff 1f       	adc	r31, r31
    70ec:	2e 0f       	add	r18, r30
    70ee:	3f 1f       	adc	r19, r31
    70f0:	f9 01       	movw	r30, r18
    70f2:	ee 5f       	subi	r30, 0xFE	; 254
    70f4:	fd 4f       	sbci	r31, 0xFD	; 253
    70f6:	c2 81       	ldd	r28, Z+2	; 0x02
    70f8:	c1 11       	cpse	r28, r1
    70fa:	0e 94 62 38 	call	0x70c4	; 0x70c4 <gp_timer_restart>
    70fe:	8c 2f       	mov	r24, r28
    7100:	cf 91       	pop	r28
    7102:	08 95       	ret

00007104 <wdt_init>:
    7104:	90 e4       	ldi	r25, 0x40	; 64
    7106:	69 9f       	mul	r22, r25
    7108:	b0 01       	movw	r22, r0
    710a:	11 24       	eor	r1, r1
    710c:	50 e0       	ldi	r21, 0x00	; 0
    710e:	44 0f       	add	r20, r20
    7110:	55 1f       	adc	r21, r21
    7112:	44 0f       	add	r20, r20
    7114:	55 1f       	adc	r21, r21
    7116:	44 0f       	add	r20, r20
    7118:	55 1f       	adc	r21, r21
    711a:	88 30       	cpi	r24, 0x08	; 8
    711c:	10 f4       	brcc	.+4      	; 0x7122 <wdt_init+0x1e>
    711e:	90 e0       	ldi	r25, 0x00	; 0
    7120:	01 c0       	rjmp	.+2      	; 0x7124 <wdt_init+0x20>
    7122:	90 e2       	ldi	r25, 0x20	; 32
    7124:	87 70       	andi	r24, 0x07	; 7
    7126:	48 2b       	or	r20, r24
    7128:	46 2b       	or	r20, r22
    712a:	49 2b       	or	r20, r25
    712c:	a8 95       	wdr
    712e:	84 b7       	in	r24, 0x34	; 52
    7130:	87 7f       	andi	r24, 0xF7	; 247
    7132:	84 bf       	out	0x34, r24	; 52
    7134:	e0 e6       	ldi	r30, 0x60	; 96
    7136:	f0 e0       	ldi	r31, 0x00	; 0
    7138:	80 81       	ld	r24, Z
    713a:	88 61       	ori	r24, 0x18	; 24
    713c:	80 83       	st	Z, r24
    713e:	40 83       	st	Z, r20
    7140:	08 95       	ret

00007142 <isr_init>:
    7142:	81 e0       	ldi	r24, 0x01	; 1
    7144:	85 bf       	out	0x35, r24	; 53
    7146:	82 e0       	ldi	r24, 0x02	; 2
    7148:	85 bf       	out	0x35, r24	; 53
    714a:	08 95       	ret

0000714c <gpio_init>:
    714c:	81 e0       	ldi	r24, 0x01	; 1
    714e:	88 b9       	out	0x08, r24	; 8
    7150:	38 98       	cbi	0x07, 0	; 7
    7152:	80 e2       	ldi	r24, 0x20	; 32
    7154:	84 b9       	out	0x04, r24	; 4
    7156:	85 b9       	out	0x05, r24	; 5
    7158:	08 95       	ret

0000715a <uart_init>:
    715a:	61 15       	cp	r22, r1
    715c:	21 ee       	ldi	r18, 0xE1	; 225
    715e:	72 07       	cpc	r23, r18
    7160:	81 05       	cpc	r24, r1
    7162:	91 05       	cpc	r25, r1
    7164:	48 f5       	brcc	.+82     	; 0x71b8 <uart_init+0x5e>
    7166:	dc 01       	movw	r26, r24
    7168:	cb 01       	movw	r24, r22
    716a:	88 0f       	add	r24, r24
    716c:	99 1f       	adc	r25, r25
    716e:	aa 1f       	adc	r26, r26
    7170:	bb 1f       	adc	r27, r27
    7172:	88 0f       	add	r24, r24
    7174:	99 1f       	adc	r25, r25
    7176:	aa 1f       	adc	r26, r26
    7178:	bb 1f       	adc	r27, r27
    717a:	9c 01       	movw	r18, r24
    717c:	ad 01       	movw	r20, r26
    717e:	22 0f       	add	r18, r18
    7180:	33 1f       	adc	r19, r19
    7182:	44 1f       	adc	r20, r20
    7184:	55 1f       	adc	r21, r21
    7186:	60 e0       	ldi	r22, 0x00	; 0
    7188:	74 e2       	ldi	r23, 0x24	; 36
    718a:	84 ef       	ldi	r24, 0xF4	; 244
    718c:	90 e0       	ldi	r25, 0x00	; 0
    718e:	0e 94 3e 3a 	call	0x747c	; 0x747c <__udivmodsi4>
    7192:	da 01       	movw	r26, r20
    7194:	c9 01       	movw	r24, r18
    7196:	01 97       	sbiw	r24, 0x01	; 1
    7198:	a1 09       	sbc	r26, r1
    719a:	b1 09       	sbc	r27, r1
    719c:	ac 01       	movw	r20, r24
    719e:	bd 01       	movw	r22, r26
    71a0:	76 95       	lsr	r23
    71a2:	67 95       	ror	r22
    71a4:	57 95       	ror	r21
    71a6:	47 95       	ror	r20
    71a8:	94 2f       	mov	r25, r20
    71aa:	25 2f       	mov	r18, r21
    71ac:	e0 ec       	ldi	r30, 0xC0	; 192
    71ae:	f0 e0       	ldi	r31, 0x00	; 0
    71b0:	80 81       	ld	r24, Z
    71b2:	8d 7f       	andi	r24, 0xFD	; 253
    71b4:	80 83       	st	Z, r24
    71b6:	22 c0       	rjmp	.+68     	; 0x71fc <uart_init+0xa2>
    71b8:	9b 01       	movw	r18, r22
    71ba:	ac 01       	movw	r20, r24
    71bc:	22 0f       	add	r18, r18
    71be:	33 1f       	adc	r19, r19
    71c0:	44 1f       	adc	r20, r20
    71c2:	55 1f       	adc	r21, r21
    71c4:	22 0f       	add	r18, r18
    71c6:	33 1f       	adc	r19, r19
    71c8:	44 1f       	adc	r20, r20
    71ca:	55 1f       	adc	r21, r21
    71cc:	60 e0       	ldi	r22, 0x00	; 0
    71ce:	74 e2       	ldi	r23, 0x24	; 36
    71d0:	84 ef       	ldi	r24, 0xF4	; 244
    71d2:	90 e0       	ldi	r25, 0x00	; 0
    71d4:	0e 94 3e 3a 	call	0x747c	; 0x747c <__udivmodsi4>
    71d8:	da 01       	movw	r26, r20
    71da:	c9 01       	movw	r24, r18
    71dc:	01 97       	sbiw	r24, 0x01	; 1
    71de:	a1 09       	sbc	r26, r1
    71e0:	b1 09       	sbc	r27, r1
    71e2:	ac 01       	movw	r20, r24
    71e4:	bd 01       	movw	r22, r26
    71e6:	76 95       	lsr	r23
    71e8:	67 95       	ror	r22
    71ea:	57 95       	ror	r21
    71ec:	47 95       	ror	r20
    71ee:	94 2f       	mov	r25, r20
    71f0:	25 2f       	mov	r18, r21
    71f2:	e0 ec       	ldi	r30, 0xC0	; 192
    71f4:	f0 e0       	ldi	r31, 0x00	; 0
    71f6:	80 81       	ld	r24, Z
    71f8:	82 60       	ori	r24, 0x02	; 2
    71fa:	80 83       	st	Z, r24
    71fc:	20 93 c5 00 	sts	0x00C5, r18	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    7200:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
    7204:	86 e0       	ldi	r24, 0x06	; 6
    7206:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
    720a:	88 e1       	ldi	r24, 0x18	; 24
    720c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    7210:	08 95       	ret

00007212 <uart_putch>:
    7212:	e0 ec       	ldi	r30, 0xC0	; 192
    7214:	f0 e0       	ldi	r31, 0x00	; 0
    7216:	90 81       	ld	r25, Z
    7218:	95 ff       	sbrs	r25, 5
    721a:	fd cf       	rjmp	.-6      	; 0x7216 <uart_putch+0x4>
    721c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    7220:	08 95       	ret

00007222 <uart_getch>:
    7222:	e0 ec       	ldi	r30, 0xC0	; 192
    7224:	f0 e0       	ldi	r31, 0x00	; 0
    7226:	80 81       	ld	r24, Z
    7228:	88 23       	and	r24, r24
    722a:	ec f7       	brge	.-6      	; 0x7226 <uart_getch+0x4>
    722c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    7230:	08 95       	ret

00007232 <uart_scan>:
    7232:	0f 93       	push	r16
    7234:	1f 93       	push	r17
    7236:	cf 93       	push	r28
    7238:	df 93       	push	r29
    723a:	8c 01       	movw	r16, r24
    723c:	66 23       	and	r22, r22
    723e:	31 f0       	breq	.+12     	; 0x724c <uart_scan+0x1a>
    7240:	0e 94 11 39 	call	0x7222	; 0x7222 <uart_getch>
    7244:	e8 01       	movw	r28, r16
    7246:	88 83       	st	Y, r24
    7248:	81 e0       	ldi	r24, 0x01	; 1
    724a:	1c c0       	rjmp	.+56     	; 0x7284 <uart_scan+0x52>
    724c:	63 e0       	ldi	r22, 0x03	; 3
    724e:	81 e0       	ldi	r24, 0x01	; 1
    7250:	0e 94 53 38 	call	0x70a6	; 0x70a6 <gp_timer_start>
    7254:	80 e0       	ldi	r24, 0x00	; 0
    7256:	e2 e0       	ldi	r30, 0x02	; 2
    7258:	f2 e0       	ldi	r31, 0x02	; 2
    725a:	a0 ec       	ldi	r26, 0xC0	; 192
    725c:	b0 e0       	ldi	r27, 0x00	; 0
    725e:	30 e2       	ldi	r19, 0x20	; 32
    7260:	46 ec       	ldi	r20, 0xC6	; 198
    7262:	50 e0       	ldi	r21, 0x00	; 0
    7264:	21 e0       	ldi	r18, 0x01	; 1
    7266:	0b c0       	rjmp	.+22     	; 0x727e <uart_scan+0x4c>
    7268:	9c 91       	ld	r25, X
    726a:	99 23       	and	r25, r25
    726c:	44 f4       	brge	.+16     	; 0x727e <uart_scan+0x4c>
    726e:	85 b1       	in	r24, 0x05	; 5
    7270:	83 27       	eor	r24, r19
    7272:	85 b9       	out	0x05, r24	; 5
    7274:	ea 01       	movw	r28, r20
    7276:	88 81       	ld	r24, Y
    7278:	e8 01       	movw	r28, r16
    727a:	88 83       	st	Y, r24
    727c:	82 2f       	mov	r24, r18
    727e:	95 81       	ldd	r25, Z+5	; 0x05
    7280:	99 23       	and	r25, r25
    7282:	91 f3       	breq	.-28     	; 0x7268 <uart_scan+0x36>
    7284:	df 91       	pop	r29
    7286:	cf 91       	pop	r28
    7288:	1f 91       	pop	r17
    728a:	0f 91       	pop	r16
    728c:	08 95       	ret

0000728e <uart_print>:
    728e:	cf 93       	push	r28
    7290:	df 93       	push	r29
    7292:	ec 01       	movw	r28, r24
    7294:	88 81       	ld	r24, Y
    7296:	88 23       	and	r24, r24
    7298:	59 f0       	breq	.+22     	; 0x72b0 <uart_print+0x22>
    729a:	8a 30       	cpi	r24, 0x0A	; 10
    729c:	19 f4       	brne	.+6      	; 0x72a4 <uart_print+0x16>
    729e:	8d e0       	ldi	r24, 0x0D	; 13
    72a0:	0e 94 09 39 	call	0x7212	; 0x7212 <uart_putch>
    72a4:	89 91       	ld	r24, Y+
    72a6:	0e 94 09 39 	call	0x7212	; 0x7212 <uart_putch>
    72aa:	88 81       	ld	r24, Y
    72ac:	81 11       	cpse	r24, r1
    72ae:	f5 cf       	rjmp	.-22     	; 0x729a <uart_print+0xc>
    72b0:	df 91       	pop	r29
    72b2:	cf 91       	pop	r28
    72b4:	08 95       	ret

000072b6 <get_cmd_code>:
    72b6:	cf 93       	push	r28
    72b8:	df 93       	push	r29
    72ba:	ec 01       	movw	r28, r24
    72bc:	88 81       	ld	r24, Y
    72be:	88 34       	cpi	r24, 0x48	; 72
    72c0:	28 f4       	brcc	.+10     	; 0x72cc <get_cmd_code+0x16>
    72c2:	86 34       	cpi	r24, 0x46	; 70
    72c4:	28 f4       	brcc	.+10     	; 0x72d0 <get_cmd_code+0x1a>
    72c6:	88 23       	and	r24, r24
    72c8:	71 f0       	breq	.+28     	; 0x72e6 <get_cmd_code+0x30>
    72ca:	07 c0       	rjmp	.+14     	; 0x72da <get_cmd_code+0x24>
    72cc:	82 35       	cpi	r24, 0x52	; 82
    72ce:	29 f4       	brne	.+10     	; 0x72da <get_cmd_code+0x24>
    72d0:	80 e0       	ldi	r24, 0x00	; 0
    72d2:	91 e0       	ldi	r25, 0x01	; 1
    72d4:	0e 94 47 39 	call	0x728e	; 0x728e <uart_print>
    72d8:	06 c0       	rjmp	.+12     	; 0x72e6 <get_cmd_code+0x30>
    72da:	86 e0       	ldi	r24, 0x06	; 6
    72dc:	91 e0       	ldi	r25, 0x01	; 1
    72de:	0e 94 47 39 	call	0x728e	; 0x728e <uart_print>
    72e2:	80 e0       	ldi	r24, 0x00	; 0
    72e4:	01 c0       	rjmp	.+2      	; 0x72e8 <get_cmd_code+0x32>
    72e6:	88 81       	ld	r24, Y
    72e8:	df 91       	pop	r29
    72ea:	cf 91       	pop	r28
    72ec:	08 95       	ret

000072ee <uart_get_cmd>:
    72ee:	0f 93       	push	r16
    72f0:	1f 93       	push	r17
    72f2:	cf 93       	push	r28
    72f4:	df 93       	push	r29
    72f6:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <uart_buffer>
    72fa:	10 e0       	ldi	r17, 0x00	; 0
    72fc:	c2 e8       	ldi	r28, 0x82	; 130
    72fe:	d1 e0       	ldi	r29, 0x01	; 1
    7300:	01 e0       	ldi	r16, 0x01	; 1
    7302:	0d c0       	rjmp	.+26     	; 0x731e <uart_get_cmd+0x30>
    7304:	88 81       	ld	r24, Y
    7306:	8b 35       	cpi	r24, 0x5B	; 91
    7308:	49 f0       	breq	.+18     	; 0x731c <uart_get_cmd+0x2e>
    730a:	8d 35       	cpi	r24, 0x5D	; 93
    730c:	19 f4       	brne	.+6      	; 0x7314 <uart_get_cmd+0x26>
    730e:	11 23       	and	r17, r17
    7310:	31 f0       	breq	.+12     	; 0x731e <uart_get_cmd+0x30>
    7312:	0d c0       	rjmp	.+26     	; 0x732e <uart_get_cmd+0x40>
    7314:	11 23       	and	r17, r17
    7316:	19 f0       	breq	.+6      	; 0x731e <uart_get_cmd+0x30>
    7318:	21 96       	adiw	r28, 0x01	; 1
    731a:	01 c0       	rjmp	.+2      	; 0x731e <uart_get_cmd+0x30>
    731c:	10 2f       	mov	r17, r16
    731e:	60 e0       	ldi	r22, 0x00	; 0
    7320:	ce 01       	movw	r24, r28
    7322:	0e 94 19 39 	call	0x7232	; 0x7232 <uart_scan>
    7326:	81 11       	cpse	r24, r1
    7328:	ed cf       	rjmp	.-38     	; 0x7304 <uart_get_cmd+0x16>
    732a:	11 23       	and	r17, r17
    732c:	29 f0       	breq	.+10     	; 0x7338 <uart_get_cmd+0x4a>
    732e:	82 e8       	ldi	r24, 0x82	; 130
    7330:	91 e0       	ldi	r25, 0x01	; 1
    7332:	0e 94 5b 39 	call	0x72b6	; 0x72b6 <get_cmd_code>
    7336:	01 c0       	rjmp	.+2      	; 0x733a <uart_get_cmd+0x4c>
    7338:	8f ef       	ldi	r24, 0xFF	; 255
    733a:	df 91       	pop	r29
    733c:	cf 91       	pop	r28
    733e:	1f 91       	pop	r17
    7340:	0f 91       	pop	r16
    7342:	08 95       	ret

00007344 <restart>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    7344:	0f b6       	in	r0, 0x3f	; 63
    7346:	f8 94       	cli
    7348:	a8 95       	wdr
    734a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    734e:	88 61       	ori	r24, 0x18	; 24
    7350:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    7354:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
    7358:	0f be       	out	0x3f, r0	; 63
}

void restart(void)
{
	wdt_disable();
	reset();
    735a:	e0 91 80 01 	lds	r30, 0x0180	; 0x800180 <__data_end>
    735e:	f0 91 81 01 	lds	r31, 0x0181	; 0x800181 <__data_end+0x1>
    7362:	09 95       	icall
    7364:	08 95       	ret

00007366 <__vector_6>:
}

ISR(WDT_vect)
{
    7366:	1f 92       	push	r1
    7368:	0f 92       	push	r0
    736a:	0f b6       	in	r0, 0x3f	; 63
    736c:	0f 92       	push	r0
    736e:	11 24       	eor	r1, r1
    7370:	2f 93       	push	r18
    7372:	3f 93       	push	r19
    7374:	4f 93       	push	r20
    7376:	5f 93       	push	r21
    7378:	6f 93       	push	r22
    737a:	7f 93       	push	r23
    737c:	8f 93       	push	r24
    737e:	9f 93       	push	r25
    7380:	af 93       	push	r26
    7382:	bf 93       	push	r27
    7384:	ef 93       	push	r30
    7386:	ff 93       	push	r31
	wdt_reset();
    7388:	a8 95       	wdr
	WDTCSR |= (1 << WDIE);
    738a:	e0 e6       	ldi	r30, 0x60	; 96
    738c:	f0 e0       	ldi	r31, 0x00	; 0
    738e:	80 81       	ld	r24, Z
    7390:	80 64       	ori	r24, 0x40	; 64
    7392:	80 83       	st	Z, r24
    7394:	80 e0       	ldi	r24, 0x00	; 0
    7396:	90 e0       	ldi	r25, 0x00	; 0
{
	for (uint8_t timer = LED_TIMER; timer < MAX_TIMER; timer++)
	{
		if (++gp_timer[timer].ticks_15ms == gp_timer[timer].compare)
		{
			gp_timer[timer].done = true;
    7398:	41 e0       	ldi	r20, 0x01	; 1

inline void gp_timer_count(void)
{
	for (uint8_t timer = LED_TIMER; timer < MAX_TIMER; timer++)
	{
		if (++gp_timer[timer].ticks_15ms == gp_timer[timer].compare)
    739a:	fc 01       	movw	r30, r24
    739c:	ee 0f       	add	r30, r30
    739e:	ff 1f       	adc	r31, r31
    73a0:	e8 0f       	add	r30, r24
    73a2:	f9 1f       	adc	r31, r25
    73a4:	ee 5f       	subi	r30, 0xFE	; 254
    73a6:	fd 4f       	sbci	r31, 0xFD	; 253
    73a8:	20 81       	ld	r18, Z
    73aa:	2f 5f       	subi	r18, 0xFF	; 255
    73ac:	20 83       	st	Z, r18
    73ae:	31 81       	ldd	r19, Z+1	; 0x01
    73b0:	23 13       	cpse	r18, r19
    73b2:	09 c0       	rjmp	.+18     	; 0x73c6 <__vector_6+0x60>
		{
			gp_timer[timer].done = true;
    73b4:	fc 01       	movw	r30, r24
    73b6:	ee 0f       	add	r30, r30
    73b8:	ff 1f       	adc	r31, r31
    73ba:	e8 0f       	add	r30, r24
    73bc:	f9 1f       	adc	r31, r25
    73be:	ee 5f       	subi	r30, 0xFE	; 254
    73c0:	fd 4f       	sbci	r31, 0xFD	; 253
    73c2:	42 83       	std	Z+2, r20	; 0x02
			gp_timer[timer].ticks_15ms = 0;
    73c4:	10 82       	st	Z, r1
    73c6:	01 96       	adiw	r24, 0x01	; 1
	sei();
}

inline void gp_timer_count(void)
{
	for (uint8_t timer = LED_TIMER; timer < MAX_TIMER; timer++)
    73c8:	83 30       	cpi	r24, 0x03	; 3
    73ca:	91 05       	cpc	r25, r1
    73cc:	31 f7       	brne	.-52     	; 0x739a <__vector_6+0x34>
{
	wdt_reset();
	WDTCSR |= (1 << WDIE);
	gp_timer_count();
	
	if (gp_timer_get_clr_rdy(LED_TIMER))
    73ce:	80 e0       	ldi	r24, 0x00	; 0
    73d0:	0e 94 70 38 	call	0x70e0	; 0x70e0 <gp_timer_get_clr_rdy>
    73d4:	88 23       	and	r24, r24
    73d6:	21 f0       	breq	.+8      	; 0x73e0 <__vector_6+0x7a>
	{
		LED_TOGGLE;
    73d8:	95 b1       	in	r25, 0x05	; 5
    73da:	80 e2       	ldi	r24, 0x20	; 32
    73dc:	89 27       	eor	r24, r25
    73de:	85 b9       	out	0x05, r24	; 5
	}
}
    73e0:	ff 91       	pop	r31
    73e2:	ef 91       	pop	r30
    73e4:	bf 91       	pop	r27
    73e6:	af 91       	pop	r26
    73e8:	9f 91       	pop	r25
    73ea:	8f 91       	pop	r24
    73ec:	7f 91       	pop	r23
    73ee:	6f 91       	pop	r22
    73f0:	5f 91       	pop	r21
    73f2:	4f 91       	pop	r20
    73f4:	3f 91       	pop	r19
    73f6:	2f 91       	pop	r18
    73f8:	0f 90       	pop	r0
    73fa:	0f be       	out	0x3f, r0	; 63
    73fc:	0f 90       	pop	r0
    73fe:	1f 90       	pop	r1
    7400:	18 95       	reti

00007402 <main>:
    7402:	0f b6       	in	r0, 0x3f	; 63
    7404:	f8 94       	cli
    7406:	a8 95       	wdr
    7408:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    740c:	88 61       	ori	r24, 0x18	; 24
    740e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    7412:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
    7416:	0f be       	out	0x3f, r0	; 63

int main(void)
{
	wdt_disable();
	isr_init();
    7418:	0e 94 a1 38 	call	0x7142	; 0x7142 <isr_init>
	gpio_init();
    741c:	0e 94 a6 38 	call	0x714c	; 0x714c <gpio_init>
	sei();
    7420:	78 94       	sei
	
	if (BUTTON == DOWN)
    7422:	30 99       	sbic	0x06, 0	; 6
    7424:	23 c0       	rjmp	.+70     	; 0x746c <main+0x6a>
	{
		uart_init(BAUD_RATE_115200);
    7426:	60 e0       	ldi	r22, 0x00	; 0
    7428:	72 ec       	ldi	r23, 0xC2	; 194
    742a:	81 e0       	ldi	r24, 0x01	; 1
    742c:	90 e0       	ldi	r25, 0x00	; 0
    742e:	0e 94 ad 38 	call	0x715a	; 0x715a <uart_init>
		wdt_init(WDTO_15MS, true, false);
    7432:	40 e0       	ldi	r20, 0x00	; 0
    7434:	61 e0       	ldi	r22, 0x01	; 1
    7436:	80 e0       	ldi	r24, 0x00	; 0
    7438:	0e 94 82 38 	call	0x7104	; 0x7104 <wdt_init>
		
		gp_timer_start(SYNC_TIMER, SYNC_TIME);
    743c:	61 e2       	ldi	r22, 0x21	; 33
    743e:	82 e0       	ldi	r24, 0x02	; 2
    7440:	0e 94 53 38 	call	0x70a6	; 0x70a6 <gp_timer_start>
		gp_timer_start(LED_TIMER, LED_TIME);
    7444:	61 e2       	ldi	r22, 0x21	; 33
    7446:	80 e0       	ldi	r24, 0x00	; 0
    7448:	0e 94 53 38 	call	0x70a6	; 0x70a6 <gp_timer_start>
		
		while (1)
		{
			switch (uart_get_cmd())
    744c:	0e 94 77 39 	call	0x72ee	; 0x72ee <uart_get_cmd>
    7450:	82 35       	cpi	r24, 0x52	; 82
    7452:	11 f4       	brne	.+4      	; 0x7458 <main+0x56>
			case UPDATE_FW_CMD:
				update_fw();
				break;
#endif				
			case RESET_CMD:
				restart();
    7454:	0e 94 a2 39 	call	0x7344	; 0x7344 <restart>
				break;
			default:
				break;
			}
			
			if (gp_timer_get_clr_rdy(SYNC_TIMER))
    7458:	82 e0       	ldi	r24, 0x02	; 2
    745a:	0e 94 70 38 	call	0x70e0	; 0x70e0 <gp_timer_get_clr_rdy>
    745e:	88 23       	and	r24, r24
    7460:	a9 f3       	breq	.-22     	; 0x744c <main+0x4a>
			{
				uart_print(SYNC);
    7462:	86 e7       	ldi	r24, 0x76	; 118
    7464:	91 e0       	ldi	r25, 0x01	; 1
    7466:	0e 94 47 39 	call	0x728e	; 0x728e <uart_print>
    746a:	f0 cf       	rjmp	.-32     	; 0x744c <main+0x4a>
			}		
		}
	}

	reset();	
    746c:	e0 91 80 01 	lds	r30, 0x0180	; 0x800180 <__data_end>
    7470:	f0 91 81 01 	lds	r31, 0x0181	; 0x800181 <__data_end+0x1>
    7474:	09 95       	icall
}
    7476:	80 e0       	ldi	r24, 0x00	; 0
    7478:	90 e0       	ldi	r25, 0x00	; 0
    747a:	08 95       	ret

0000747c <__udivmodsi4>:
    747c:	a1 e2       	ldi	r26, 0x21	; 33
    747e:	1a 2e       	mov	r1, r26
    7480:	aa 1b       	sub	r26, r26
    7482:	bb 1b       	sub	r27, r27
    7484:	fd 01       	movw	r30, r26
    7486:	0d c0       	rjmp	.+26     	; 0x74a2 <__udivmodsi4_ep>

00007488 <__udivmodsi4_loop>:
    7488:	aa 1f       	adc	r26, r26
    748a:	bb 1f       	adc	r27, r27
    748c:	ee 1f       	adc	r30, r30
    748e:	ff 1f       	adc	r31, r31
    7490:	a2 17       	cp	r26, r18
    7492:	b3 07       	cpc	r27, r19
    7494:	e4 07       	cpc	r30, r20
    7496:	f5 07       	cpc	r31, r21
    7498:	20 f0       	brcs	.+8      	; 0x74a2 <__udivmodsi4_ep>
    749a:	a2 1b       	sub	r26, r18
    749c:	b3 0b       	sbc	r27, r19
    749e:	e4 0b       	sbc	r30, r20
    74a0:	f5 0b       	sbc	r31, r21

000074a2 <__udivmodsi4_ep>:
    74a2:	66 1f       	adc	r22, r22
    74a4:	77 1f       	adc	r23, r23
    74a6:	88 1f       	adc	r24, r24
    74a8:	99 1f       	adc	r25, r25
    74aa:	1a 94       	dec	r1
    74ac:	69 f7       	brne	.-38     	; 0x7488 <__udivmodsi4_loop>
    74ae:	60 95       	com	r22
    74b0:	70 95       	com	r23
    74b2:	80 95       	com	r24
    74b4:	90 95       	com	r25
    74b6:	9b 01       	movw	r18, r22
    74b8:	ac 01       	movw	r20, r24
    74ba:	bd 01       	movw	r22, r26
    74bc:	cf 01       	movw	r24, r30
    74be:	08 95       	ret

000074c0 <_exit>:
    74c0:	f8 94       	cli

000074c2 <__stop_program>:
    74c2:	ff cf       	rjmp	.-2      	; 0x74c2 <__stop_program>
