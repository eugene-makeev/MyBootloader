
MyBootloader.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  00000330  000003c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000330  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000082  00800142  00800142  00000406  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000406  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000438  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ac7  00000000  00000000  000004f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ff  00000000  00000000  00000fbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000496  00000000  00000000  000017be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00001c54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000468  00000000  00000000  00001d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002e4  00000000  00000000  000021d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000024b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 2a 01 	jmp	0x254	; 0x254 <__vector_6>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e3       	ldi	r30, 0x30	; 48
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 34       	cpi	r26, 0x42	; 66
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e4       	ldi	r26, 0x42	; 66
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 3c       	cpi	r26, 0xC4	; 196
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 3d 01 	call	0x27a	; 0x27a <main>
  9e:	0c 94 96 01 	jmp	0x32c	; 0x32c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <gpio_init>:
	} while ((gcode_pages < GCODE_MAX_SIZE_PAGES));
}

void update_fw(void)
{
	uart_print("Update FW");
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	88 b9       	out	0x08, r24	; 8
  aa:	38 98       	cbi	0x07, 0	; 7
  ac:	80 e2       	ldi	r24, 0x20	; 32
  ae:	84 b9       	out	0x04, r24	; 4
  b0:	85 b9       	out	0x05, r24	; 5
  b2:	08 95       	ret

000000b4 <uart_init>:
  b4:	61 15       	cp	r22, r1
  b6:	21 ee       	ldi	r18, 0xE1	; 225
  b8:	72 07       	cpc	r23, r18
  ba:	81 05       	cpc	r24, r1
  bc:	91 05       	cpc	r25, r1
  be:	48 f5       	brcc	.+82     	; 0x112 <uart_init+0x5e>
  c0:	dc 01       	movw	r26, r24
  c2:	cb 01       	movw	r24, r22
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	aa 1f       	adc	r26, r26
  ca:	bb 1f       	adc	r27, r27
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	aa 1f       	adc	r26, r26
  d2:	bb 1f       	adc	r27, r27
  d4:	9c 01       	movw	r18, r24
  d6:	ad 01       	movw	r20, r26
  d8:	22 0f       	add	r18, r18
  da:	33 1f       	adc	r19, r19
  dc:	44 1f       	adc	r20, r20
  de:	55 1f       	adc	r21, r21
  e0:	60 e0       	ldi	r22, 0x00	; 0
  e2:	74 e2       	ldi	r23, 0x24	; 36
  e4:	84 ef       	ldi	r24, 0xF4	; 244
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	0e 94 74 01 	call	0x2e8	; 0x2e8 <__udivmodsi4>
  ec:	da 01       	movw	r26, r20
  ee:	c9 01       	movw	r24, r18
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	a1 09       	sbc	r26, r1
  f4:	b1 09       	sbc	r27, r1
  f6:	ac 01       	movw	r20, r24
  f8:	bd 01       	movw	r22, r26
  fa:	76 95       	lsr	r23
  fc:	67 95       	ror	r22
  fe:	57 95       	ror	r21
 100:	47 95       	ror	r20
 102:	94 2f       	mov	r25, r20
 104:	25 2f       	mov	r18, r21
 106:	e0 ec       	ldi	r30, 0xC0	; 192
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	8d 7f       	andi	r24, 0xFD	; 253
 10e:	80 83       	st	Z, r24
 110:	22 c0       	rjmp	.+68     	; 0x156 <uart_init+0xa2>
 112:	9b 01       	movw	r18, r22
 114:	ac 01       	movw	r20, r24
 116:	22 0f       	add	r18, r18
 118:	33 1f       	adc	r19, r19
 11a:	44 1f       	adc	r20, r20
 11c:	55 1f       	adc	r21, r21
 11e:	22 0f       	add	r18, r18
 120:	33 1f       	adc	r19, r19
 122:	44 1f       	adc	r20, r20
 124:	55 1f       	adc	r21, r21
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	74 e2       	ldi	r23, 0x24	; 36
 12a:	84 ef       	ldi	r24, 0xF4	; 244
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 74 01 	call	0x2e8	; 0x2e8 <__udivmodsi4>
 132:	da 01       	movw	r26, r20
 134:	c9 01       	movw	r24, r18
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	a1 09       	sbc	r26, r1
 13a:	b1 09       	sbc	r27, r1
 13c:	ac 01       	movw	r20, r24
 13e:	bd 01       	movw	r22, r26
 140:	76 95       	lsr	r23
 142:	67 95       	ror	r22
 144:	57 95       	ror	r21
 146:	47 95       	ror	r20
 148:	94 2f       	mov	r25, r20
 14a:	25 2f       	mov	r18, r21
 14c:	e0 ec       	ldi	r30, 0xC0	; 192
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	82 60       	ori	r24, 0x02	; 2
 154:	80 83       	st	Z, r24
 156:	20 93 c5 00 	sts	0x00C5, r18	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 15a:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 15e:	8a e0       	ldi	r24, 0x0A	; 10
 160:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 164:	88 e1       	ldi	r24, 0x18	; 24
 166:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 16a:	08 95       	ret

0000016c <uart_putch>:
 16c:	e0 ec       	ldi	r30, 0xC0	; 192
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	90 81       	ld	r25, Z
 172:	95 ff       	sbrs	r25, 5
 174:	fd cf       	rjmp	.-6      	; 0x170 <uart_putch+0x4>
 176:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 17a:	08 95       	ret

0000017c <uart_getch>:
 17c:	e0 ec       	ldi	r30, 0xC0	; 192
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	88 23       	and	r24, r24
 184:	ec f7       	brge	.-6      	; 0x180 <uart_getch+0x4>
 186:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 18a:	08 95       	ret

0000018c <uart_print>:
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	fc 01       	movw	r30, r24
 192:	20 81       	ld	r18, Z
 194:	22 23       	and	r18, r18
 196:	61 f0       	breq	.+24     	; 0x1b0 <uart_print+0x24>
 198:	ec 01       	movw	r28, r24
 19a:	2a 30       	cpi	r18, 0x0A	; 10
 19c:	19 f4       	brne	.+6      	; 0x1a4 <uart_print+0x18>
 19e:	8d e0       	ldi	r24, 0x0D	; 13
 1a0:	0e 94 b6 00 	call	0x16c	; 0x16c <uart_putch>
 1a4:	89 91       	ld	r24, Y+
 1a6:	0e 94 b6 00 	call	0x16c	; 0x16c <uart_putch>
 1aa:	28 81       	ld	r18, Y
 1ac:	21 11       	cpse	r18, r1
 1ae:	f5 cf       	rjmp	.-22     	; 0x19a <uart_print+0xe>
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <fill_page_buffer>:
 1b6:	fc 01       	movw	r30, r24
 1b8:	db 01       	movw	r26, r22
 1ba:	91 e0       	ldi	r25, 0x01	; 1
 1bc:	2c 91       	ld	r18, X
 1be:	11 96       	adiw	r26, 0x01	; 1
 1c0:	8c 91       	ld	r24, X
 1c2:	11 97       	sbiw	r26, 0x01	; 1
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	38 2b       	or	r19, r24
 1c8:	09 01       	movw	r0, r18
 1ca:	90 93 57 00 	sts	0x0057, r25	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
 1ce:	e8 95       	spm
 1d0:	11 24       	eor	r1, r1
 1d2:	32 96       	adiw	r30, 0x02	; 2
 1d4:	12 96       	adiw	r26, 0x02	; 2
 1d6:	f2 cf       	rjmp	.-28     	; 0x1bc <fill_page_buffer+0x6>

000001d8 <get_page_data>:
 1d8:	0f 93       	push	r16
 1da:	1f 93       	push	r17
 1dc:	cf 93       	push	r28
 1de:	8c 01       	movw	r16, r24
 1e0:	c0 e0       	ldi	r28, 0x00	; 0
 1e2:	0e 94 be 00 	call	0x17c	; 0x17c <uart_getch>
 1e6:	f8 01       	movw	r30, r16
 1e8:	81 93       	st	Z+, r24
 1ea:	8f 01       	movw	r16, r30
 1ec:	8a e2       	ldi	r24, 0x2A	; 42
 1ee:	0e 94 b6 00 	call	0x16c	; 0x16c <uart_putch>
 1f2:	cf 5f       	subi	r28, 0xFF	; 255
 1f4:	c0 38       	cpi	r28, 0x80	; 128
 1f6:	a9 f7       	brne	.-22     	; 0x1e2 <get_page_data+0xa>
 1f8:	80 e8       	ldi	r24, 0x80	; 128
 1fa:	cf 91       	pop	r28
 1fc:	1f 91       	pop	r17
 1fe:	0f 91       	pop	r16
 200:	08 95       	ret

00000202 <update_gcode>:
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	0e 94 c6 00 	call	0x18c	; 0x18c <uart_print>
 20a:	84 e4       	ldi	r24, 0x44	; 68
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <get_page_data>
 212:	88 23       	and	r24, r24
 214:	44 f0       	brlt	.+16     	; 0x226 <update_gcode+0x24>
 216:	9f ef       	ldi	r25, 0xFF	; 255
 218:	e8 2f       	mov	r30, r24
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	ec 5b       	subi	r30, 0xBC	; 188
 21e:	fe 4f       	sbci	r31, 0xFE	; 254
 220:	90 83       	st	Z, r25
 222:	8f 5f       	subi	r24, 0xFF	; 255
 224:	ca f7       	brpl	.-14     	; 0x218 <update_gcode+0x16>
 226:	64 e4       	ldi	r22, 0x44	; 68
 228:	71 e0       	ldi	r23, 0x01	; 1
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	9e e3       	ldi	r25, 0x3E	; 62
 22e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <fill_page_buffer>

00000232 <restart>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	f8 94       	cli
 236:	a8 95       	wdr
 238:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 23c:	88 61       	ori	r24, 0x18	; 24
 23e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 242:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 246:	0f be       	out	0x3f, r0	; 63
}

void restart(void)
{
	wdt_disable();
	reset();
 248:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <__data_end>
 24c:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <__data_end+0x1>
 250:	09 95       	icall
 252:	08 95       	ret

00000254 <__vector_6>:
}

ISR(WDT_vect)
{
 254:	1f 92       	push	r1
 256:	0f 92       	push	r0
 258:	0f b6       	in	r0, 0x3f	; 63
 25a:	0f 92       	push	r0
 25c:	11 24       	eor	r1, r1
 25e:	8f 93       	push	r24
 260:	9f 93       	push	r25
	LED_TOGGLE;
 262:	95 b1       	in	r25, 0x05	; 5
 264:	80 e2       	ldi	r24, 0x20	; 32
 266:	89 27       	eor	r24, r25
 268:	85 b9       	out	0x05, r24	; 5
	wdt_reset();
 26a:	a8 95       	wdr
}
 26c:	9f 91       	pop	r25
 26e:	8f 91       	pop	r24
 270:	0f 90       	pop	r0
 272:	0f be       	out	0x3f, r0	; 63
 274:	0f 90       	pop	r0
 276:	1f 90       	pop	r1
 278:	18 95       	reti

0000027a <main>:

int main(void)
{
	gpio_init();
 27a:	0e 94 53 00 	call	0xa6	; 0xa6 <gpio_init>
	
	if (BUTTON == DOWN)
 27e:	30 99       	sbic	0x06, 0	; 6
 280:	2b c0       	rjmp	.+86     	; 0x2d8 <main+0x5e>
	{
		LED_ON;
 282:	2d 9a       	sbi	0x05, 5	; 5
		
		uart_init(BAUD_RATE_115200);
 284:	60 e0       	ldi	r22, 0x00	; 0
 286:	72 ec       	ldi	r23, 0xC2	; 194
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 5a 00 	call	0xb4	; 0xb4 <uart_init>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
 290:	9e e0       	ldi	r25, 0x0E	; 14
 292:	88 e1       	ldi	r24, 0x18	; 24
 294:	0f b6       	in	r0, 0x3f	; 63
 296:	f8 94       	cli
 298:	a8 95       	wdr
 29a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
		wdt_enable(WDTO_1S);
		
		while (1)
		{
			uart_print("G - ???????? g-???? ?????????\n");
 2a4:	88 e1       	ldi	r24, 0x18	; 24
 2a6:	91 e0       	ldi	r25, 0x01	; 1
 2a8:	0e 94 c6 00 	call	0x18c	; 0x18c <uart_print>
#if (SUPPORT_FW_UPDATE == 1)
			uart_print("F - ?????????? ????????\n");
#endif
			uart_print("R - ?????\n");
 2ac:	87 e3       	ldi	r24, 0x37	; 55
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	0e 94 c6 00 	call	0x18c	; 0x18c <uart_print>
			
			uint8_t input = uart_getch();
 2b4:	0e 94 be 00 	call	0x17c	; 0x17c <uart_getch>
			
			switch (input)
 2b8:	82 35       	cpi	r24, 0x52	; 82
 2ba:	59 f0       	breq	.+22     	; 0x2d2 <main+0x58>
 2bc:	18 f4       	brcc	.+6      	; 0x2c4 <main+0x4a>
 2be:	87 34       	cpi	r24, 0x47	; 71
 2c0:	31 f0       	breq	.+12     	; 0x2ce <main+0x54>
 2c2:	f0 cf       	rjmp	.-32     	; 0x2a4 <main+0x2a>
 2c4:	87 36       	cpi	r24, 0x67	; 103
 2c6:	19 f0       	breq	.+6      	; 0x2ce <main+0x54>
 2c8:	82 37       	cpi	r24, 0x72	; 114
 2ca:	19 f0       	breq	.+6      	; 0x2d2 <main+0x58>
 2cc:	eb cf       	rjmp	.-42     	; 0x2a4 <main+0x2a>
			{
			case 'G':
			case 'g':
				update_gcode();
 2ce:	0e 94 01 01 	call	0x202	; 0x202 <update_gcode>
				update_fw();
				break;
#endif				
			case 'R':
			case 'r':
				restart();
 2d2:	0e 94 19 01 	call	0x232	; 0x232 <restart>
				break;
 2d6:	e6 cf       	rjmp	.-52     	; 0x2a4 <main+0x2a>
				break;
			}
		}
	}

	reset();	
 2d8:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <__data_end>
 2dc:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <__data_end+0x1>
 2e0:	09 95       	icall
}
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	08 95       	ret

000002e8 <__udivmodsi4>:
 2e8:	a1 e2       	ldi	r26, 0x21	; 33
 2ea:	1a 2e       	mov	r1, r26
 2ec:	aa 1b       	sub	r26, r26
 2ee:	bb 1b       	sub	r27, r27
 2f0:	fd 01       	movw	r30, r26
 2f2:	0d c0       	rjmp	.+26     	; 0x30e <__udivmodsi4_ep>

000002f4 <__udivmodsi4_loop>:
 2f4:	aa 1f       	adc	r26, r26
 2f6:	bb 1f       	adc	r27, r27
 2f8:	ee 1f       	adc	r30, r30
 2fa:	ff 1f       	adc	r31, r31
 2fc:	a2 17       	cp	r26, r18
 2fe:	b3 07       	cpc	r27, r19
 300:	e4 07       	cpc	r30, r20
 302:	f5 07       	cpc	r31, r21
 304:	20 f0       	brcs	.+8      	; 0x30e <__udivmodsi4_ep>
 306:	a2 1b       	sub	r26, r18
 308:	b3 0b       	sbc	r27, r19
 30a:	e4 0b       	sbc	r30, r20
 30c:	f5 0b       	sbc	r31, r21

0000030e <__udivmodsi4_ep>:
 30e:	66 1f       	adc	r22, r22
 310:	77 1f       	adc	r23, r23
 312:	88 1f       	adc	r24, r24
 314:	99 1f       	adc	r25, r25
 316:	1a 94       	dec	r1
 318:	69 f7       	brne	.-38     	; 0x2f4 <__udivmodsi4_loop>
 31a:	60 95       	com	r22
 31c:	70 95       	com	r23
 31e:	80 95       	com	r24
 320:	90 95       	com	r25
 322:	9b 01       	movw	r18, r22
 324:	ac 01       	movw	r20, r24
 326:	bd 01       	movw	r22, r26
 328:	cf 01       	movw	r24, r30
 32a:	08 95       	ret

0000032c <_exit>:
 32c:	f8 94       	cli

0000032e <__stop_program>:
 32e:	ff cf       	rjmp	.-2      	; 0x32e <__stop_program>
